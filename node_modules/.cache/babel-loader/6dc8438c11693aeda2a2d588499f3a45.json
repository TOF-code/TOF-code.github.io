{"ast":null,"code":"let accessToken;\nconst clientId = '734956a8c8904f718a0bcbd975ff15f4';\nconst redirectUri = 'http://localhost:3000/';\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const AccessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (AccessTokenMatch && expiresInMatch) {\n      accessToken = AccessTokenMatch[1];\n      let expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=user-read-private%20user-read-email&response_type=token&state=123`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist: function (listName, trackUris) {\n    if (!listName || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userID;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userID = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          name: listName\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistID = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  } // end of savePlaylist method\n\n}; // end of Spotify object\n\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/gebruiker1/projects VS code/music app/src/util/Spotify.js"],"names":["accessToken","clientId","redirectUri","Spotify","getAccessToken","AccessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","listName","trackUris","length","userID","method","body","JSON","stringify","playlistID","uris"],"mappings":"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","sourcesContent":["let accessToken;\r\nconst clientId = '734956a8c8904f718a0bcbd975ff15f4';\r\nconst redirectUri = 'http://localhost:3000/'; \r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n        const AccessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if(AccessTokenMatch && expiresInMatch) {\r\n            accessToken = AccessTokenMatch[1];\r\n            let expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        }\r\n        else {\r\n            const accessUrl= `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=user-read-private%20user-read-email&response_type=token&state=123`\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search (term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`, \r\n            }\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            if(!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map( track => ({\r\n                id: track.id, \r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri \r\n            }));\r\n        });\r\n    },\r\n\r\n    savePlaylist: function(listName, trackUris) {\r\n        if ( !listName || !trackUris.length ) {\r\n           return;\r\n          }\r\n   \r\n          const accessToken = Spotify.getAccessToken();\r\n          const headers = { Authorization: `Bearer ${accessToken}`}\r\n          let userID;\r\n   \r\n          return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n          ).then(response => response.json()\r\n          ).then(jsonResponse => {\r\n            userID = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,{\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: JSON.stringify({ name: listName })\r\n            }).then(response =>  response.json()\r\n            ).then(jsonResponse => {\r\n              const playlistID = jsonResponse.id;\r\n               return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,{\r\n              method: 'POST',\r\n              headers: headers,\r\n              body: JSON.stringify({ uris: trackUris })\r\n            });\r\n          });\r\n        });\r\n      } // end of savePlaylist method\r\n   } // end of Spotify object\r\n   \r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var accessToken;var clientId='734956a8c8904f718a0bcbd975ff15f4';var redirectUri='https://zonked-writing.surge.sh';var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}var AccessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(AccessTokenMatch&&expiresInMatch){accessToken=AccessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);window.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&redirect_uri=\").concat(redirectUri,\"&scope=user-read-private%20user-read-email&response_type=token&state=123\");window.location=accessUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},savePlaylist:function savePlaylist(listName,trackUris){if(!listName||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userID;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userID=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userID,\"/playlists\"),{method:'POST',headers:headers,body:JSON.stringify({name:listName})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistID=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userID,\"/playlists/\").concat(playlistID,\"/tracks\"),{method:'POST',headers:headers,body:JSON.stringify({uris:trackUris})});});});}// end of savePlaylist method\n};// end of Spotify object\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/gebruiker1/projects VS code/music app/src/util/Spotify.js"],"names":["accessToken","clientId","redirectUri","Spotify","getAccessToken","AccessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","listName","trackUris","length","userID","method","body","JSON","stringify","playlistID","uris"],"mappings":"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","sourcesContent":["let accessToken;\r\nconst clientId = '734956a8c8904f718a0bcbd975ff15f4';\r\nconst redirectUri = 'https://zonked-writing.surge.sh'; \r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n        const AccessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if(AccessTokenMatch && expiresInMatch) {\r\n            accessToken = AccessTokenMatch[1];\r\n            let expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        }\r\n        else {\r\n            const accessUrl= `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=user-read-private%20user-read-email&response_type=token&state=123`\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search (term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`, \r\n            }\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            if(!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map( track => ({\r\n                id: track.id, \r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri \r\n            }));\r\n        });\r\n    },\r\n\r\n    savePlaylist: function(listName, trackUris) {\r\n        if ( !listName || !trackUris.length ) {\r\n           return;\r\n          }\r\n   \r\n          const accessToken = Spotify.getAccessToken();\r\n          const headers = { Authorization: `Bearer ${accessToken}`}\r\n          let userID;\r\n   \r\n          return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n          ).then(response => response.json()\r\n          ).then(jsonResponse => {\r\n            userID = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,{\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: JSON.stringify({ name: listName })\r\n            }).then(response =>  response.json()\r\n            ).then(jsonResponse => {\r\n              const playlistID = jsonResponse.id;\r\n               return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,{\r\n              method: 'POST',\r\n              headers: headers,\r\n              body: JSON.stringify({ uris: trackUris })\r\n            });\r\n          });\r\n        });\r\n      } // end of savePlaylist method\r\n   } // end of Spotify object\r\n   \r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}
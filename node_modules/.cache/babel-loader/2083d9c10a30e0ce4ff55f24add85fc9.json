{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\gebruiker1\\\\projects VS code\\\\music app\\\\src\\\\components\\\\App\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistTracks: [],\n      playlistName: ''\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      });\n    });\n  }\n\n  addTrack(newTrack) {\n    let list = this.state.playlistTracks;\n\n    if (list.find(savedTrack => savedTrack.id === newTrack.id)) {\n      return;\n    }\n\n    list.push(newTrack);\n    this.setState({\n      playlistTracks: list\n    });\n  }\n\n  removeTrack(track) {\n    let list = this.state.playlistTracks;\n    list = list.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({\n      playlistTracks: list\n    });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      PlaylistName: name\n    });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Ja\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: \"mmm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), \"ing\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n          onSearch: this.search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-playlist\",\n          children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n            searchResults: this.state.searchResults,\n            onAdd: this.addTrack\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n            playlistTracks: this.state.playlistTracks,\n            playlistName: this.state.playlistName,\n            onRemove: this.removeTrack,\n            onNameChange: this.updatePlaylistName,\n            onSave: this.savePlaylist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/gebruiker1/projects VS code/music app/src/components/App/App.js"],"names":["React","SearchBar","SearchResults","Playlist","Spotify","App","Component","constructor","props","state","searchResults","playlistTracks","playlistName","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","term","then","setState","newTrack","list","find","savedTrack","id","push","track","filter","currentTrack","name","PlaylistName","trackUris","map","uri","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport './App.css';\r\nimport SearchBar from '../SearchBar/SearchBar'; \r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport Spotify from '../../util/Spotify';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchResults: [],\r\n      playlistTracks: [],\r\n      playlistName: ''\r\n    };\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  search(term) {\r\n    Spotify.search(term).then( searchResults => {\r\n      this.setState({searchResults: searchResults});\r\n    });\r\n  }\r\n\r\n  addTrack (newTrack) {\r\n    let list = this.state.playlistTracks;\r\n    if (list.find(savedTrack => savedTrack.id === newTrack.id)) {\r\n      return;\r\n    }\r\n    list.push(newTrack); \r\n    this.setState(\r\n      {playlistTracks: list}\r\n      );  \r\n  }\r\n\r\n  removeTrack(track) {\r\n    let list = this.state.playlistTracks; \r\n    list = list.filter( currentTrack => currentTrack.id !== track.id )\r\n    this.setState(\r\n      {playlistTracks: list}\r\n      );\r\n  }\r\n\r\n  updatePlaylistName (name) {\r\n    this.setState({PlaylistName: name});\r\n  }\r\n\r\n  \r\n  savePlaylist() {\r\n      const trackUris = this.state.playlistTracks.map(track => track.uri);\r\n      Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\r\n        this.setState({\r\n          playlistName: 'New Playlist',\r\n          playlistTracks: []\r\n        });\r\n      });\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n          <div className=\"App\">\r\n              <SearchBar onSearch={this.search} />\r\n              <div className=\"App-playlist\">\r\n              <SearchResults \r\n                searchResults={this.state.searchResults} onAdd={this.addTrack}  />\r\n              <Playlist playlistTracks={this.state.playlistTracks} playlistName={this.state.playlistName} onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist} />\r\n              </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}
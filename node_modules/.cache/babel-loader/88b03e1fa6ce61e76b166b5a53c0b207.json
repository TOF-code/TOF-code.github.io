{"ast":null,"code":"import SearchBar from \"../components/SearchBar/SearchBar\";\nlet accessToken = '';\nconst clientId = '734956a8c8904f718a0bcbd975ff15f4';\nconst redirectUri = 'http://localhost:3000/';\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const AccessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (AccessTokenMatch && expiresInMatch) {\n      accessToken = AccessTokenMatch[1];\n      let expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=user-read-private%20user-read-email&response_type=token&state=123`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    let token = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      return response.json;\n    }).then(jsonResponse => {\n      return jsonResponse.tracks.i.map(track => {\n        return {\n          ID: track.id,\n          Name: track.name,\n          Arist: track.artists[0].name,\n          Album: track.album.name,\n          URI: track.uri\n        };\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/gebruiker1/projects VS code/music app/src/util/Spotify.js"],"names":["SearchBar","accessToken","clientId","redirectUri","Spotify","getAccessToken","AccessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","token","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","i","map","track","ID","id","Name","name","Arist","artists","Album","album","URI","uri"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,mCAAtB;AAEA,IAAIC,WAAW,GAAG,EAAlB;AACA,MAAMC,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,wBAApB;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,cAAc,GAAG;AACb,QAAIJ,WAAJ,EAAiB;AACb,aAAOA,WAAP;AACH;;AACD,UAAMK,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;AACA,UAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;AAEA,QAAGJ,gBAAgB,IAAIK,cAAvB,EAAuC;AACnCV,MAAAA,WAAW,GAAGK,gBAAgB,CAAC,CAAD,CAA9B;AACA,UAAIM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAtB;AACAJ,MAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMb,WAAW,GAAG,EAAtC,EAA0CW,SAAS,GAAG,IAAtD;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACA,aAAOf,WAAP;AACH,KAND,MAMO;AACH,YAAMgB,SAAS,GAAG,oDAAmDf,QAAS,iBAAgBC,WAAY,0EAA1G;AACAI,MAAAA,MAAM,CAACC,QAAP,GAAkBS,SAAlB;AACH;AACJ,GAlBW;;AAoBZC,EAAAA,MAAM,CAAEC,IAAF,EAAQ;AACV,QAAIC,KAAK,GAAGhB,OAAO,CAACC,cAAR,EAAZ;AACA,WAAOgB,KAAK,CAAE,kDAAiDF,IAAK,EAAxD,EAA2D;AACnEG,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASH,KAAM;AAD1B;AAD0D,KAA3D,CAAL,CAIJI,IAJI,CAICC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KANM,EAMJF,IANI,CAMCG,YAAY,IAAI;AAEpB,aAAOA,YAAY,CAACC,MAAb,CAAoBC,CAApB,CAAsBC,GAAtB,CAA2BC,KAAK,IAAI;AACnC,eAAO;AACHC,UAAAA,EAAE,EAAED,KAAK,CAACE,EADP;AAEHC,UAAAA,IAAI,EAAEH,KAAK,CAACI,IAFT;AAGHC,UAAAA,KAAK,EAAEL,KAAK,CAACM,OAAN,CAAc,CAAd,EAAiBF,IAHrB;AAIHG,UAAAA,KAAK,EAAEP,KAAK,CAACQ,KAAN,CAAYJ,IAJhB;AAKHK,UAAAA,GAAG,EAAET,KAAK,CAACU;AALR,SAAP;AAOH,OARE,CAAP;AASH,KAjBM,CAAP;AAkBH;;AAxCW,CAAhB;AA2CA,eAAerC,OAAf","sourcesContent":["import SearchBar from \"../components/SearchBar/SearchBar\";\r\n\r\nlet accessToken = '';\r\nconst clientId = '734956a8c8904f718a0bcbd975ff15f4';\r\nconst redirectUri = 'http://localhost:3000/'; \r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n        const AccessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if(AccessTokenMatch && expiresInMatch) {\r\n            accessToken = AccessTokenMatch[1];\r\n            let expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl= `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=user-read-private%20user-read-email&response_type=token&state=123`\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search (term) {\r\n        let token = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        }).then(response => {\r\n            return response.json;\r\n        }).then(jsonResponse => {\r\n            \r\n            return jsonResponse.tracks.i.map( track => {\r\n                    return {\r\n                        ID: track.id, \r\n                        Name: track.name,\r\n                        Arist: track.artists[0].name,\r\n                        Album: track.album.name,\r\n                        URI: track.uri        \r\n                    }              \r\n                })\r\n        })\r\n    }   \r\n};\r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"let accessToken;\nconst clientId = '734956a8c8904f718a0bcbd975ff15f4';\nconst redirectUri = 'http://localhost:3000/';\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const AccessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (AccessTokenMatch && expiresInMatch) {\n      accessToken = AccessTokenMatch[1];\n      let expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=user-read-private%20user-read-email&response_type=token&state=123`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(Name, trackUris) {\n    if (!Name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n      'Content-Type': 'application/json'\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/gebruiker1/projects VS code/music app/src/util/Spotify.js"],"names":["accessToken","clientId","redirectUri","Spotify","getAccessToken","AccessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","Name","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["let accessToken;\r\nconst clientId = '734956a8c8904f718a0bcbd975ff15f4';\r\nconst redirectUri = 'http://localhost:3000/'; \r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        const AccessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if(AccessTokenMatch && expiresInMatch) {\r\n            accessToken = AccessTokenMatch[1];\r\n            let expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        }\r\n\r\n        else {\r\n            const accessUrl= `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=user-read-private%20user-read-email&response_type=token&state=123`\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search (term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`, \r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            if(!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map( track => ({\r\n                id: track.id, \r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri \r\n            }));\r\n        });\r\n    },\r\n\r\n    savePlaylist (Name, trackUris) {\r\n        if(!Name || !trackUris.length) {\r\n           return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {\r\n            Authorization: `Bearer ${accessToken}`,\r\n            'Content-Type': 'application/json'\r\n        };\r\n        let userId;\r\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({name: name})\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers, \r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris})\r\n                })\r\n            })\r\n        })\r\n    }\r\n};\r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}
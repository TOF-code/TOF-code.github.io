{"ast":null,"code":"let accessToken = '';\nconst clientId = '734956a8c8904f718a0bcbd975ff15f4';\nconst redirectUri = 'http://localhost:3000/';\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=user-read-private%20user-read-email&response_type=token&state=123`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/gebruiker1/projects VS code/music app/src/util/Spotify.js"],"names":["accessToken","clientId","redirectUri","Spotify","getAccessToken","accessUrl","window","location","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"AAAA,IAAIA,WAAW,GAAG,EAAlB;AACA,MAAMC,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,wBAApB;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,cAAc,GAAG;AACb,QAAIJ,WAAJ,EAAiB;AACb,aAAOA,WAAP;AACH,KAFD,MAMK;AACD,YAAMK,SAAS,GAAG,oDAAmDJ,QAAS,iBAAgBC,WAAY,0EAA1G;AACAI,MAAAA,MAAM,CAACC,QAAP,GAAkBF,SAAlB;AACH;AACJ,GAZW;;AAcZG,EAAAA,MAAM,CAAEC,IAAF,EAAQ;AACV,UAAMT,WAAW,GAAGG,OAAO,CAACC,cAAR,EAApB;AACA,WAAOM,KAAK,CAAE,kDAAiDD,IAAK,EAAxD,EAA2D;AACnEE,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASZ,WAAY;AADhC;AAD0D,KAA3D,CAAL,CAIJa,IAJI,CAICC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJb,EAKLF,IALK,CAKAG,YAAY,IAAI;AAEnB,aAAOA,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA+BC,KAAK,KAAK;AAC5CC,QAAAA,EAAE,EAAED,KAAK,CAACC,EADkC;AAE5CC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAFgC;AAG5CC,QAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHmB;AAI5CG,QAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJyB;AAK5CI,QAAAA,GAAG,EAAEN,KAAK,CAACM;AALiC,OAAL,CAApC,CAAP;AAOH,KAdM,CAAP;AAeH,GA/BW;;AAiCZC,EAAAA,YAAY,CAAEL,IAAF,EAAQM,SAAR,EAAmB;AAC3B,QAAG,CAACN,IAAD,IAAS,CAAEM,SAAS,CAACC,MAAxB,EAAgC;AAC7B;AACF;;AACD,UAAM7B,WAAW,GAAGG,OAAO,CAACC,cAAR,EAApB;AACA,UAAMO,OAAO,GAAG;AAACC,MAAAA,aAAa,EAAG,UAASZ,WAAY;AAAtC,KAAhB;AACA,QAAI8B,MAAJ;AACA,WAAOpB,KAAK,CAAC,+BAAD,EAAkC;AAACC,MAAAA,OAAO,EAAEA;AAAV,KAAlC,CAAL,CACLE,IADK,CACAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADZ,EAELF,IAFK,CAEAG,YAAY,IAAI;AACnBc,MAAAA,MAAM,GAAGd,YAAY,CAACK,EAAtB;AACA,aAAOX,KAAK,CAAE,oCAAmCoB,MAAO,YAA5C,EAAyD;AACjEnB,QAAAA,OAAO,EAAEA,OADwD;AAEjEoB,QAAAA,MAAM,EAAE,MAFyD;AAGjEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACZ,UAAAA,IAAI,EAAEA;AAAP,SAAf;AAH2D,OAAzD,CAAL,CAIJT,IAJI,CAICC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJb,EAKLF,IALK,CAKAG,YAAY,IAAI;AACnB,cAAMmB,UAAU,GAAGnB,YAAY,CAACK,EAAhC;AACA,eAAOX,KAAK,CAAE,oCAAmCoB,MAAO,cAAaK,UAAW,SAApE,EAA8E;AACtFxB,UAAAA,OAAO,EAAEA,OAD6E;AAEtFoB,UAAAA,MAAM,EAAE,MAF8E;AAGtFC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEE,YAAAA,IAAI,EAAER;AAAR,WAAf;AAHgF,SAA9E,CAAZ;AAKH,OAZM,CAAP;AAaH,KAjBM,CAAP;AAkBH;;AA1DW,CAAhB;AA6DA,eAAezB,OAAf","sourcesContent":["let accessToken = '';\r\nconst clientId = '734956a8c8904f718a0bcbd975ff15f4';\r\nconst redirectUri = 'http://localhost:3000/'; \r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n\r\n        \r\n        else {\r\n            const accessUrl= `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=user-read-private%20user-read-email&response_type=token&state=123`\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search (term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            \r\n            return jsonResponse.tracks.items.map( track => ({\r\n                id: track.id, \r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri \r\n            }));\r\n        });\r\n    },\r\n\r\n    savePlaylist (name, trackUris) {\r\n        if(!name || ! trackUris.length) {\r\n           return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {Authorization: `Bearer ${accessToken}`};\r\n        let userId;\r\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({name: name})\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers, \r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris})\r\n                })\r\n            })\r\n        })\r\n    }\r\n};\r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}